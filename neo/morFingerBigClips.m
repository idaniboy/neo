function [cfs scales] = morFingerBigClips(D,dt,SCA,buffer)
%% 
% morFinger that breaks ictal segs into 1 sec segs appropriately. 

%approximate length and size of chunks
secs=1; %size of chunks in secs
nchunks=round(dt*length(D)/secs);
if nchunks==0
    nchunks=1;
end
chunks=floor(length(D)/nchunks); %size of chunks in EEGTime


% %Define cone of influence
% lengthD = size(D,2); %length of sample
% [PLmin,PRmax] = conofinf('Morl',1:64,lengthD,[]);
% buffer = -PLmin(2)/PLmin(1); %X-axis COI L bounds

% buffer = amount of time added to 1 sec clip to make it match landmarks
% generated by findLandmarks2
% e.g. for 5000 Hz file --> 1000Hz, goal dt's is 2048
% so for one second file (1000 dt's), total buffer is 1048, 524 on either side
% 



%% Rolling window implementation

disp('total number of chunks:');
disp(nchunks);

MorletFourierFactor = 4*pi/(6+sqrt(2+6^2));  

for j=1:size(D,1)
    MM=[];
    preMM=cell(1,nchunks);
    prescales=cell(1,nchunks);

    parfor i=1:nchunks
        startr=(i-1)*chunks+i;  
        if i~=nchunks && i~=1 %uses sliding window chunk size
            cwtsig = cwtft({D(j,startr-buffer:startr+chunks+buffer-1),dt},'scales',SCA,'wavelet','morl');
            preMM{i}=abs(cwtsig.cfs(:,buffer:chunks+buffer-1));
        elseif i == 1 %for first chunk
            cwtsig = cwtft({D(j,1:chunks),dt},'scales',SCA,'wavelet','morl');
            preMM{i}=abs(cwtsig.cfs);
            % prescales{i}=cwtsig.scales.*MorletFourierFactor; 
        else %for last chunk
            cwtsig = cwtft({D(j,startr:length(D)),dt},'scales',SCA,'wavelet','morl');
            preMM{i}=abs(cwtsig.cfs);
            prescales{i}=cwtsig.scales.*MorletFourierFactor; 
        end
%             MM=[MM abs(cwtsig.cfs)]; %OLD CODE; non-pre allocated matrix

    end
    sizeChunk = size(preMM{1},2);
    MM=zeros(size(preMM{1},1),nchunks*sizeChunk-nchunks);
    for i=1:nchunks
        startChunkInd = (i-1)*sizeChunk+1;
        endChunkInd = i*sizeChunk;
        if i~=nchunks
            MM(:,startChunkInd:endChunkInd)=preMM{i};
        else
            %last chunk; adds buffer of zeros to the end...
            sizeMM = size(MM(:,startChunkInd:size(MM,2)),2);
            sizePreMM = size(preMM{i},2);
            disp(strcat('Size of MM prior to last chunk:',num2str(sizeMM)));
            disp(strcat('Size of preMM:',num2str(sizePreMM)));
            disp(abs(sizePreMM-sizeMM));
            zeroMat = zeros(size(preMM{1},1),abs(sizePreMM-sizeMM));
            MM = horzcat(MM,zeroMat);
            sizeZeroMat=size(zeroMat);
            disp(sizeZeroMat);
            MM(:,startChunkInd:size(MM,2))=preMM{i};
            disp(nchunks);
        end

    end
    sizeMM = size(MM,2);
    disp(strcat('Final size of slidingMorlet file: ',num2str(sizeMM)))

end
% save('morletmatrix.mat','MM')
cfs=flipud(MM);
scales = prescales{nchunks};




